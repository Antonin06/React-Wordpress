@use 'sass:map';
@use 'variables' as v;

body {
    font-family: var(--font-family-base);
    scrollbar-color: var(--sb-thumb-color) var(--sb-track-color);
    &::-webkit-scrollbar {
        width: var(--sb-size);
    }
    &::-webkit-scrollbar-track {
        background: var(--sb-track-color);
        border-radius: 0;
    }
    &::-webkit-scrollbar-thumb {
        background: var(--sb-thumb-color);
        border-radius: 0;
    }
}
a {
    text-decoration: none;
}

.container {
    width: 100%;
    padding: 0 var(--padding-container);
    margin: 0 auto;
    max-width: calc(var(--container) + var(--padding-container) * 2 - 100px);
}
.container-medium {
    max-width: calc(var(--container-medium) + var(--padding-container) * 2);
}

.container-tablet {
    max-width: calc(var(--container-tablet) + var(--padding-container) * 2);
    margin: 0 auto;
    padding: 0 var(--padding-container);

}

.container-small {
    max-width: calc(var(--container-small) + var(--padding-container) * 2);
}

.container-xsmall {
    max-width: calc(var(--container-xsmall) + var(--padding-container) * 2);
}

// GRID SYSTEM
[class*=" grid-"], [class^="grid-"] {
    display: grid;
    grid-gap: v.$grid-gutter-width;

    & > * {
        //prevent grid blow out
        min-width: 0;
    }
}

@for $i from 1 through v.$grid-columns {
    .grid-#{$i} {
        grid-template-columns: repeat(#{$i}, 1fr);
    }
}

@each $key, $size in v.$breakpoints {
    @for $i from 1 through v.$grid-columns {
        .grid-#{$key}-#{$i} {
            @media screen and (min-width: $size) {
                grid-template-columns: repeat(#{$i}, 1fr);
            }
        }
    }
}